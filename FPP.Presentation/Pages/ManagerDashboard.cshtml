@page "/ManagerDashboard"
@model FPP.Presentation.Pages.ManagerDashboardModel
@{
    ViewData["Title"] = "Manager Dashboard";
    Layout = null;
}

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>@ViewData["Title"]</title>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.0/css/all.min.css">
    <style>
        @@import url('https://fonts.googleapis.com/css2?family=Orbitron:wght@400;500;700;900&family=Rajdhani:wght@300;400;500;600;700&display=swap');

        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: 'Rajdhani', sans-serif;
            background: #000;
            color: white;
            overflow-x: hidden;
        }

        /* Navigation Bar */
        .navbar {
            position: fixed;
            top: 0;
            left: 0;
            right: 0;
            padding: 20px 40px;
            display: flex;
            justify-content: space-between;
            align-items: center;
            background: rgba(0, 0, 0, 0.8);
            backdrop-filter: blur(20px);
            border-bottom: 1px solid rgba(255, 107, 53, 0.3);
            z-index: 1000;
        }

        .logo {
            font-family: 'Orbitron', sans-serif;
            font-size: 1.8rem;
            font-weight: 900;
            background: linear-gradient(135deg, #ff6b35, #f7931e);
            -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
            letter-spacing: 2px;
        }

        .nav-right {
            display: flex;
            align-items: center;
            gap: 30px;
        }

        .notification-icon {
            position: relative;
            cursor: pointer;
            font-size: 1.5rem;
            color: #ff6b35;
            transition: all 0.3s;
        }

            .notification-icon:hover {
                transform: scale(1.1);
            }

        .notification-badge {
            position: absolute;
            top: -8px;
            right: -8px;
            background: #ff6b35;
            color: white;
            border-radius: 50%;
            width: 20px;
            height: 20px;
            display: none;
            align-items: center;
            justify-content: center;
            font-size: 0.7rem;
            font-weight: 700;
        }

            .notification-badge.show {
                display: flex;
            }

        /* Notification Panel */
        .notification-panel {
            position: fixed;
            top: 80px;
            right: 20px;
            width: 420px;
            max-height: 600px;
            background: rgba(10, 10, 10, 0.98);
            border: 1px solid rgba(255, 107, 53, 0.5);
            border-radius: 15px;
            box-shadow: 0 10px 40px rgba(255, 107, 53, 0.3);
            z-index: 9999;
            display: none;
            flex-direction: column;
            animation: slideInRight 0.3s ease-out;
        }

            .notification-panel.show {
                display: flex;
            }

        @@keyframes slideInRight {
            from {
                transform: translateX(50px);
                opacity: 0;
            }

            to {
                transform: translateX(0);
                opacity: 1;
            }
        }

        .notification-panel-header {
            padding: 20px;
            border-bottom: 1px solid rgba(255, 107, 53, 0.3);
            display: flex;
            justify-content: space-between;
            align-items: center;
        }

            .notification-panel-header h3 {
                color: #ff6b35;
                font-family: 'Orbitron', sans-serif;
                font-size: 1.2rem;
            }

        .close-panel {
            background: none;
            border: none;
            color: #999;
            font-size: 1.5rem;
            cursor: pointer;
            transition: all 0.3s;
        }

            .close-panel:hover {
                color: #ff6b35;
                transform: rotate(90deg);
            }

        .notification-list {
            flex: 1;
            overflow-y: auto;
            padding: 10px;
        }

            .notification-list::-webkit-scrollbar {
                width: 8px;
            }

            .notification-list::-webkit-scrollbar-track {
                background: rgba(255, 255, 255, 0.05);
            }

            .notification-list::-webkit-scrollbar-thumb {
                background: rgba(255, 107, 53, 0.5);
                border-radius: 4px;
            }

        .notification-item {
            padding: 15px;
            margin-bottom: 10px;
            background: rgba(255, 255, 255, 0.03);
            border: 1px solid rgba(255, 255, 255, 0.1);
            border-radius: 10px;
            cursor: pointer;
            transition: all 0.3s;
            position: relative;
        }

            .notification-item:hover {
                background: rgba(255, 107, 53, 0.1);
                border-color: rgba(255, 107, 53, 0.3);
            }

            .notification-item.unread {
                background: rgba(255, 107, 53, 0.05);
                border-left: 3px solid #ff6b35;
            }

        .notification-unread-dot {
            position: absolute;
            top: 15px;
            right: 15px;
            width: 10px;
            height: 10px;
            background: #ff6b35;
            border-radius: 50%;
            animation: pulse 2s infinite;
        }

        @@keyframes pulse {
            0%, 100% {
                opacity: 1;
                transform: scale(1);
            }

            50% {
                opacity: 0.5;
                transform: scale(1.1);
            }
        }

        .notification-content {
            padding-right: 20px;
        }

        .notification-message {
            color: white;
            font-size: 0.95rem;
            margin-bottom: 8px;
            line-height: 1.5;
        }

        .notification-details {
            color: #999;
            font-size: 0.85rem;
            line-height: 1.6;
        }

        .notification-time {
            color: #666;
            font-size: 0.8rem;
            margin-top: 8px;
            display: block;
        }

        .notification-empty {
            text-align: center;
            padding: 60px 20px;
            color: #666;
        }

            .notification-empty i {
                font-size: 3rem;
                margin-bottom: 15px;
                opacity: 0.3;
            }

        .user-info {
            display: flex;
            align-items: center;
            gap: 10px;
            padding: 8px 15px;
            background: rgba(255, 107, 53, 0.1);
            border: 1px solid rgba(255, 107, 53, 0.3);
            border-radius: 50px;
        }

        .user-avatar {
            width: 35px;
            height: 35px;
            border-radius: 50%;
            background: linear-gradient(135deg, #ff6b35, #f7931e);
            display: flex;
            align-items: center;
            justify-content: center;
        }

        /* Main Container */
        .container {
            margin-top: 80px;
            padding: 30px 40px;
            max-width: 1400px;
            margin-left: auto;
            margin-right: auto;
        }

        /* Dashboard Header */
        .dashboard-header {
            margin-bottom: 30px;
        }

            .dashboard-header h1 {
                font-family: 'Orbitron', sans-serif;
                font-size: 2.5rem;
                background: linear-gradient(135deg, #ff6b35, #f7931e);
                -webkit-background-clip: text;
                -webkit-text-fill-color: transparent;
                margin-bottom: 10px;
            }

            .dashboard-header p {
                color: #999;
                font-size: 1.1rem;
            }

        /* Stats Cards */
        .stats-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
            gap: 20px;
            margin-bottom: 30px;
        }

        .stat-card {
            background: rgba(255, 255, 255, 0.05);
            border: 1px solid rgba(255, 107, 53, 0.3);
            border-radius: 15px;
            padding: 20px;
            transition: all 0.3s;
        }

            .stat-card:hover {
                transform: translateY(-5px);
                box-shadow: 0 10px 30px rgba(255, 107, 53, 0.3);
                border-color: #ff6b35;
            }

        .stat-card-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 15px;
        }

        .stat-icon {
            width: 50px;
            height: 50px;
            background: rgba(255, 107, 53, 0.2);
            border-radius: 12px;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 1.5rem;
            color: #ff6b35;
        }

        .stat-value {
            font-size: 2.5rem;
            font-weight: 700;
            color: #ff6b35;
        }

        .stat-label {
            color: #999;
            font-size: 0.95rem;
            text-transform: uppercase;
            letter-spacing: 1px;
        }

        /* Filter Tabs */
        .filter-tabs {
            display: flex;
            gap: 15px;
            margin-bottom: 25px;
            flex-wrap: wrap;
        }

        .filter-tab {
            padding: 10px 20px;
            background: rgba(255, 255, 255, 0.05);
            border: 1px solid rgba(255, 107, 53, 0.3);
            border-radius: 25px;
            cursor: pointer;
            transition: all 0.3s;
            font-weight: 600;
            text-transform: uppercase;
            font-size: 0.9rem;
            letter-spacing: 1px;
        }

            .filter-tab:hover {
                background: rgba(255, 107, 53, 0.2);
            }

            .filter-tab.active {
                background: linear-gradient(135deg, #ff6b35, #f7931e);
                border-color: transparent;
                color: white;
            }

        /* Bookings Table */
        .bookings-section {
            background: rgba(255, 255, 255, 0.03);
            border: 1px solid rgba(255, 107, 53, 0.3);
            border-radius: 15px;
            padding: 25px;
            overflow-x: auto;
        }

        .section-title {
            font-size: 1.5rem;
            margin-bottom: 20px;
            color: #ff6b35;
            display: flex;
            align-items: center;
            gap: 10px;
        }

        .bookings-table {
            width: 100%;
            border-collapse: collapse;
        }

            .bookings-table thead {
                background: rgba(255, 107, 53, 0.1);
            }

            .bookings-table th {
                padding: 15px;
                text-align: left;
                font-weight: 600;
                text-transform: uppercase;
                font-size: 0.85rem;
                letter-spacing: 1px;
                color: #ff6b35;
                border-bottom: 2px solid rgba(255, 107, 53, 0.3);
            }

            .bookings-table td {
                padding: 15px;
                border-bottom: 1px solid rgba(255, 255, 255, 0.1);
            }

            .bookings-table tbody tr {
                transition: all 0.3s;
            }

                .bookings-table tbody tr:hover {
                    background: rgba(255, 107, 53, 0.05);
                }

        .status-badge {
            display: inline-block;
            padding: 5px 12px;
            border-radius: 20px;
            font-size: 0.85rem;
            font-weight: 600;
            text-transform: uppercase;
        }

        .status-pending {
            background: rgba(255, 193, 7, 0.2);
            color: #ffc107;
            border: 1px solid #ffc107;
        }

        .status-approved {
            background: rgba(76, 175, 80, 0.2);
            color: #4caf50;
            border: 1px solid #4caf50;
        }

        .status-rejected {
            background: rgba(244, 67, 54, 0.2);
            color: #f44336;
            border: 1px solid #f44336;
        }

        .action-buttons {
            display: flex;
            gap: 10px;
        }

        .btn {
            padding: 8px 15px;
            border: none;
            border-radius: 8px;
            cursor: pointer;
            font-weight: 600;
            font-size: 0.85rem;
            transition: all 0.3s;
            text-transform: uppercase;
            letter-spacing: 0.5px;
        }

        .btn-approve {
            background: linear-gradient(135deg, #4caf50, #45a049);
            color: white;
        }

            .btn-approve:hover {
                transform: translateY(-2px);
                box-shadow: 0 5px 15px rgba(76, 175, 80, 0.4);
            }

        .btn-reject {
            background: linear-gradient(135deg, #f44336, #e53935);
            color: white;
        }

            .btn-reject:hover {
                transform: translateY(-2px);
                box-shadow: 0 5px 15px rgba(244, 67, 54, 0.4);
            }

        .btn-view {
            background: rgba(255, 107, 53, 0.2);
            color: #ff6b35;
            border: 1px solid #ff6b35;
        }

            .btn-view:hover {
                background: #ff6b35;
                color: white;
            }

        /* Toast Notification */
        .notification-toast {
            position: fixed;
            top: 100px;
            right: 20px;
            min-width: 350px;
            max-width: 450px;
            background: rgba(10, 10, 10, 0.95);
            border: 1px solid rgba(255, 107, 53, 0.5);
            border-radius: 12px;
            padding: 15px;
            z-index: 10000;
            animation: slideIn 0.5s ease-out;
            box-shadow: 0 10px 40px rgba(255, 107, 53, 0.3);
        }

        .toast-header {
            display: flex;
            align-items: center;
            gap: 10px;
            margin-bottom: 10px;
            color: #ff6b35;
            font-weight: 600;
        }

            .toast-header i {
                font-size: 1.2rem;
            }

        .toast-time {
            margin-left: auto;
            font-size: 0.85rem;
            color: #999;
        }

        .toast-body {
            color: white;
        }

            .toast-body p {
                margin: 0 0 8px 0;
            }

            .toast-body small {
                color: #999;
                line-height: 1.6;
                display: block;
            }

        /* Modal */
        .modal {
            display: none;
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: rgba(0, 0, 0, 0.8);
            z-index: 9999;
            align-items: center;
            justify-content: center;
        }

        .modal-content {
            background: rgba(10, 10, 10, 0.95);
            border: 1px solid rgba(255, 107, 53, 0.5);
            border-radius: 15px;
            padding: 30px;
            max-width: 600px;
            width: 90%;
            max-height: 80vh;
            overflow-y: auto;
        }

        .modal-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 20px;
            padding-bottom: 15px;
            border-bottom: 1px solid rgba(255, 107, 53, 0.3);
        }

            .modal-header h2 {
                color: #ff6b35;
                font-family: 'Orbitron', sans-serif;
            }

        .close-modal {
            background: none;
            border: none;
            color: #999;
            font-size: 1.5rem;
            cursor: pointer;
            transition: all 0.3s;
        }

            .close-modal:hover {
                color: #ff6b35;
                transform: rotate(90deg);
            }

        .detail-row {
            display: flex;
            margin-bottom: 15px;
            padding: 10px;
            background: rgba(255, 255, 255, 0.03);
            border-radius: 8px;
        }

        .detail-label {
            flex: 0 0 150px;
            font-weight: 600;
            color: #ff6b35;
        }

        .detail-value {
            flex: 1;
            color: white;
        }

        .empty-state {
            text-align: center;
            padding: 60px 20px;
            color: #666;
        }

            .empty-state i {
                font-size: 4rem;
                margin-bottom: 20px;
                opacity: 0.3;
            }

        /* Animations */
        @@keyframes slideIn {
            from {
                transform: translateX(400px);
                opacity: 0;
            }

            to {
                transform: translateX(0);
                opacity: 1;
            }
        }

        @@keyframes slideOut {
            from {
                transform: translateX(0);
                opacity: 1;
            }

            to {
                transform: translateX(400px);
                opacity: 0;
            }
        }

        .loading {
            animation: pulse 1.5s ease-in-out infinite;
        }

        /* Responsive */
        @@media (max-width: 768px) {
            .container {
                padding: 20px 15px;
            }

            .stats-grid {
                grid-template-columns: 1fr;
            }

            .bookings-table {
                font-size: 0.85rem;
            }

            .action-buttons {
                flex-direction: column;
            }

            .navbar {
                padding: 15px 20px;
            }

            .notification-panel {
                width: calc(100vw - 40px);
                right: 20px;
            }
        }
    </style>
</head>
<body>
    <!-- Navigation Bar -->
    <nav class="navbar">
        <div class="logo">FPT LAB MANAGER</div>
        <div class="nav-right">
            <div class="notification-icon" onclick="toggleNotificationPanel()">
                <i class="fas fa-bell"></i>
                <span class="notification-badge" id="notificationBadge">0</span>
            </div>
            <div class="user-info">
                <div class="user-avatar">
                    <i class="fas fa-user-shield"></i>
                </div>
                <div>
                    <div style="font-weight: 600;">@Model.CurrentUser?.Name</div>
                    <div style="font-size: 0.85rem; color: #999;">Manager</div>
                </div>
            </div>

            <div class="user-info">
                <form method="post" asp-page-handler="Logout" style="margin-left: auto;">
                    <button type="submit" style="background:none; border:none; color:#ccc; cursor:pointer; padding: 0;">Logout</button>
                </form>
            </div>
        </div>
    </nav>

    <!-- Notification Panel -->
    <div class="notification-panel" id="notificationPanel">
        <div class="notification-panel-header">
            <h3><i class="fas fa-bell"></i> Notifications</h3>
            <button class="close-panel" onclick="toggleNotificationPanel()">
                <i class="fas fa-times"></i>
            </button>
        </div>
        <div class="notification-list" id="notificationList">
            <div class="notification-empty">
                <i class="fas fa-bell-slash"></i>
                <h4>No notifications</h4>
                <p>You're all caught up!</p>
            </div>
        </div>
    </div>

    <!-- Main Container -->
    <div class="container">
        <!-- Dashboard Header -->
        <div class="dashboard-header">
            <h1>Booking Management</h1>
            <p>Review and manage lab booking requests</p>
        </div>

        <!-- Stats Cards -->
        <div class="stats-grid">
            <div class="stat-card">
                <div class="stat-card-header">
                    <div class="stat-icon">
                        <i class="fas fa-clock"></i>
                    </div>
                </div>
                <div class="stat-value" id="pendingCount">@Model.PendingCount</div>
                <div class="stat-label">Pending Requests</div>
            </div>
            <div class="stat-card">
                <div class="stat-card-header">
                    <div class="stat-icon">
                        <i class="fas fa-check-circle"></i>
                    </div>
                </div>
                <div class="stat-value" id="approvedCount">@Model.ApprovedCount</div>
                <div class="stat-label">Approved Today</div>
            </div>
            <div class="stat-card">
                <div class="stat-card-header">
                    <div class="stat-icon">
                        <i class="fas fa-times-circle"></i>
                    </div>
                </div>
                <div class="stat-value" id="rejectedCount">@Model.RejectedCount</div>
                <div class="stat-label">Rejected Today</div>
            </div>
            <div class="stat-card">
                <div class="stat-card-header">
                    <div class="stat-icon">
                        <i class="fas fa-calendar-check"></i>
                    </div>
                </div>
                <div class="stat-value" id="totalCount">@Model.TotalCount</div>
                <div class="stat-label">Total Bookings</div>
            </div>
        </div>

        <!-- Filter Tabs -->
        <div class="filter-tabs">
            <div class="filter-tab active" data-status="all" onclick="filterBookings('all')">
                <i class="fas fa-list"></i> All Bookings
            </div>
            <div class="filter-tab" data-status="pending" onclick="filterBookings('pending')">
                <i class="fas fa-clock"></i> Pending
            </div>
            <div class="filter-tab" data-status="approved" onclick="filterBookings('approved')">
                <i class="fas fa-check"></i> Approved
            </div>
            <div class="filter-tab" data-status="rejected" onclick="filterBookings('rejected')">
                <i class="fas fa-times"></i> Rejected
            </div>
        </div>

        <!-- Bookings Table -->
        <div class="bookings-section">
            <h2 class="section-title">
                <i class="fas fa-calendar-alt"></i>
                Booking Requests
            </h2>
            <div id="bookingsTableContainer">
                <table class="bookings-table">
                    <thead>
                        <tr>
                            <th>Student</th>
                            <th>Lab / Zone</th>
                            <th>Date & Time</th>
                            <th>Activity</th>
                            <th>Status</th>
                            <th>Actions</th>
                        </tr>
                    </thead>
                    <tbody id="bookingsTableBody">
                        @foreach (var booking in Model.Bookings)
                        {
                            <tr data-status="@booking.Status.ToLower()">
                                <td>
                                    <strong>@booking.Organizer.Name</strong><br>
                                    <small style="color: #999;">@booking.Organizer.Email</small>
                                </td>
                                <td>
                                    <strong>@booking.Lab.Name</strong><br>
                                    <small style="color: #999;">@booking.Zone.Name</small>
                                </td>
                                <td>
                                    <strong>@booking.StartTime.ToString("dd/MM/yyyy")</strong><br>
                                    <small style="color: #999;">@booking.StartTime.ToString("HH:mm") - @booking.EndTime.ToString("HH:mm")</small>
                                </td>
                                <td>
                                    <strong>@booking.Title</strong><br>
                                    <small style="color: #999;">@booking.ActivityType.Name</small>
                                </td>
                                <td>
                                    <span class="status-badge status-@booking.Status.ToLower()">
                                        @booking.Status
                                    </span>
                                </td>
                                <td>
                                    <div class="action-buttons">
                                        @if (booking.Status == "Pending")
                                        {
                                            <button class="btn btn-approve" onclick="approveBooking(@booking.EventId)">
                                                <i class="fas fa-check"></i> Approve
                                            </button>
                                            <button class="btn btn-reject" onclick="rejectBooking(@booking.EventId)">
                                                <i class="fas fa-times"></i> Reject
                                            </button>
                                        }
                                        <button class="btn btn-view" onclick="viewBookingDetails(@booking.EventId)">
                                            <i class="fas fa-eye"></i> View
                                        </button>
                                    </div>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
                @if (Model.Bookings.Count == 0)
                {
                    <div class="empty-state">
                        <i class="fas fa-inbox"></i>
                        <h3>No bookings found</h3>
                        <p>There are no booking requests at the moment.</p>
                    </div>
                }
            </div>
        </div>
    </div>

    <!-- Modal for Booking Details -->
    <div class="modal" id="bookingModal">
        <div class="modal-content">
            <div class="modal-header">
                <h2><i class="fas fa-info-circle"></i> Booking Details</h2>
                <button class="close-modal" onclick="closeModal()">
                    <i class="fas fa-times"></i>
                </button>
            </div>
            <div id="modalBody">
                <!-- Details will be loaded here -->
            </div>
        </div>
    </div>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/microsoft-signalr/7.0.0/signalr.min.js"></script>
    <script>
        // SignalR Connection
        const connection = new signalR.HubConnectionBuilder()
            .withUrl("/notificationBookingHub")
            .withAutomaticReconnect()
            .build();

        connection.on("ReceiveNotification", function (notification) {
            console.log("Received notification:", notification);
            showToastNotification(notification);
            playNotificationSound();
            loadNotifications(); // Reload notifications
            setTimeout(() => {
                refreshBookings();
            }, 5500);
        });

        function playNotificationSound() {
            try {
                const audioContext = new (window.AudioContext || window.webkitAudioContext)();
                const oscillator = audioContext.createOscillator();
                const gainNode = audioContext.createGain();

                oscillator.connect(gainNode);
                gainNode.connect(audioContext.destination);

                oscillator.frequency.value = 1000;
                oscillator.type = 'sine';

                gainNode.gain.setValueAtTime(0.3, audioContext.currentTime);
                gainNode.gain.exponentialRampToValueAtTime(0.01, audioContext.currentTime + 0.3);

                oscillator.start(audioContext.currentTime);
                oscillator.stop(audioContext.currentTime + 0.3);
            } catch (e) {
                console.log('Could not play sound:', e);
            }
        }

        connection.start()
            .then(function () {
                console.log("SignalR Connected!");
                loadNotifications(); // Load notifications on connect
            })
            .catch(function (err) {
                console.error("SignalR Connection Error: ", err);
                setTimeout(() => connection.start(), 5000);
            });

        // Load notifications from database
        async function loadNotifications() {
            try {
                const response = await fetch('/ManagerDashboard?handler=Notifications');
                const data = await response.json();

                if (data.success) {
                    displayNotifications(data.notifications);
                    updateBadgeCount(data.notifications);
                }
            } catch (error) {
                console.error('Error loading notifications:', error);
            }
        }

        // Display notifications in panel
        function displayNotifications(notifications) {
            const listElement = document.getElementById('notificationList');

            if (!notifications || notifications.length === 0) {
                listElement.innerHTML = `
                    <div class="notification-empty">
                        <i class="fas fa-bell-slash"></i>
                        <h4>No notifications</h4>
                        <p>You're all caught up!</p>
                    </div>
                `;
                return;
            }

            listElement.innerHTML = notifications.map(notif => {
                const timeAgo = getTimeAgo(new Date(notif.sentAt));
                const unreadClass = !notif.isRead ? 'unread' : '';
                const unreadDot = !notif.isRead ? '<span class="notification-unread-dot"></span>' : '';

                return `
                    <div class="notification-item ${unreadClass}"
                         data-notification-id="${notif.notificationId}"
                         data-is-read="${notif.isRead}"
                         onclick="handleNotificationClick(${notif.notificationId}, ${notif.isRead})">
                        ${unreadDot}
                        <div class="notification-content">
                            <div class="notification-message">${notif.message}</div>
                            <div class="notification-details">
                                👤 ${notif.eventDetails.organizer || 'Unknown'}<br>
                                🏢 ${notif.eventDetails.lab || ''} - ${notif.eventDetails.zone || ''}<br>
                                📅 ${new Date(notif.eventDetails.startTime).toLocaleDateString('en-GB')}<br>
                                ⏰ ${new Date(notif.eventDetails.startTime).toLocaleTimeString('en-GB', {hour: '2-digit', minute: '2-digit'})} -
                                    ${new Date(notif.eventDetails.endTime).toLocaleTimeString('en-GB', {hour: '2-digit', minute: '2-digit'})}
                            </div>
                            <span class="notification-time">${timeAgo}</span>
                        </div>
                    </div>
                `;
            }).join('');
        }

        // Update badge count
        function updateBadgeCount(notifications) {
            const unreadCount = notifications.filter(n => !n.isRead).length;
            const badge = document.getElementById('notificationBadge');

            if (unreadCount > 0) {
                badge.textContent = unreadCount;
                badge.classList.add('show');
            } else {
                badge.classList.remove('show');
            }
        }

        // Handle notification click
        async function handleNotificationClick(notificationId, isRead) {
            if (!isRead) {
                try {
                    const response = await fetch(`/ManagerDashboard?handler=MarkAsRead&notificationId=${notificationId}`, {
                        method: 'POST',
                        headers: {
                            'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value
                        }
                    });

                    if (response.ok) {
                        // Update UI
                        const notifElement = document.querySelector(`[data-notification-id="${notificationId}"]`);
                        if (notifElement) {
                            notifElement.classList.remove('unread');
                            const dot = notifElement.querySelector('.notification-unread-dot');
                            if (dot) dot.remove();
                            notifElement.setAttribute('data-is-read', 'true');
                        }

                        // Reload to update badge
                        loadNotifications();
                    }
                } catch (error) {
                    console.error('Error marking as read:', error);
                }
            }
        }

        // Toggle notification panel
        function toggleNotificationPanel() {
            const panel = document.getElementById('notificationPanel');
            panel.classList.toggle('show');

            if (panel.classList.contains('show')) {
                loadNotifications();
            }
        }

        // Close panel when clicking outside
        document.addEventListener('click', function(event) {
            const panel = document.getElementById('notificationPanel');
            const icon = document.querySelector('.notification-icon');

            if (panel.classList.contains('show') &&
                !panel.contains(event.target) &&
                !icon.contains(event.target)) {
                panel.classList.remove('show');
            }
        });

        // Get time ago string
        function getTimeAgo(date) {
            const seconds = Math.floor((new Date() - date) / 1000);

            if (seconds < 60) return 'Just now';
            if (seconds < 3600) return Math.floor(seconds / 60) + ' minutes ago';
            if (seconds < 86400) return Math.floor(seconds / 3600) + ' hours ago';
            if (seconds < 604800) return Math.floor(seconds / 86400) + ' days ago';

            return date.toLocaleDateString('en-GB');
        }

        function showToastNotification(notification) {
            try {
                const toast = document.createElement('div');
                toast.className = 'notification-toast';

                const title = notification.title || "New Notification";
                const message = notification.message || "";
                const timestamp = notification.timestamp || new Date();

                const details = notification.bookingDetails || {};
                const lab = details.lab || "Unknown Lab";
                const zone = details.zone || "Unknown Zone";
                const date = details.date || "";
                const startTime = details.startTime || "";
                const endTime = details.endTime || "";
                const userName = details.userName || "Unknown User";
                const activity = details.activity || "";

                toast.innerHTML = `
                    <div class="toast-header">
                        <i class="fas fa-bell"></i>
                        <strong>${title}</strong>
                        <span class="toast-time">${new Date(timestamp).toLocaleTimeString()}</span>
                    </div>
                    <div class="toast-body">
                        <p><strong>${message}</strong></p>
                        <small>
                            👤 ${userName}<br>
                            🏢 ${lab} - ${zone}<br>
                            📅 ${date}<br>
                            ⏰ ${startTime} - ${endTime}<br>
                            📝 ${activity}
                        </small>
                    </div>
                `;

                document.body.appendChild(toast);

                setTimeout(() => {
                    toast.style.animation = 'slideOut 0.5s ease-out';
                    setTimeout(() => toast.remove(), 500);
                }, 5000);

                console.log("Toast displayed successfully");
            } catch (error) {
                console.error("Error showing toast:", error);
            }
        }

        function filterBookings(status) {
            document.querySelectorAll('.filter-tab').forEach(tab => {
                tab.classList.remove('active');
            });
            event.target.closest('.filter-tab').classList.add('active');

            const rows = document.querySelectorAll('#bookingsTableBody tr');
            rows.forEach(row => {
                if (status === 'all' || row.dataset.status === status) {
                    row.style.display = '';
                } else {
                    row.style.display = 'none';
                }
            });
        }

        async function approveBooking(eventId) {
            if (!confirm('Are you sure you want to approve this booking?')) return;

            try {
                const response = await fetch(`/ManagerDashboard?handler=Approve&eventId=${eventId}`, {
                    method: 'POST',
                    headers: {
                        'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value
                    }
                });

                if (response.ok) {
                    alert('Booking approved successfully!');
                    location.reload();
                }
            } catch (error) {
                console.error('Error:', error);
                alert('Failed to approve booking');
            }
        }

        async function rejectBooking(eventId) {
            const reason = prompt('Please enter rejection reason:');
            if (!reason) return;

            try {
                const response = await fetch(`/ManagerDashboard?handler=Reject&eventId=${eventId}&reason=${encodeURIComponent(reason)}`, {
                    method: 'POST',
                    headers: {
                        'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value
                    }
                });

                if (response.ok) {
                    alert('Booking rejected successfully!');
                    location.reload();
                }
            } catch (error) {
                console.error('Error:', error);
                alert('Failed to reject booking');
            }
        }

        function viewBookingDetails(eventId) {
            const modal = document.getElementById('bookingModal');
            modal.style.display = 'flex';
        }

        function closeModal() {
            document.getElementById('bookingModal').style.display = 'none';
        }

        function refreshBookings() {
            location.reload();
        }

        document.addEventListener('visibilitychange', function() {
            if (!document.hidden && connection.state === signalR.HubConnectionState.Disconnected) {
                connection.start();
            }
        });

        // Load notifications on page load
        window.addEventListener('load', function() {
            loadNotifications();
        });
    </script>
    @Html.AntiForgeryToken()
</body>
</html>