@page "/CreateBooking"
@model FPP.Presentation.Pages.Booking.CreateBookingModel
@{
    ViewData["Title"] = "Book a Lab";
    Layout = null; //Assuming no shared layout
}
<!DOCTYPE html>
<html lang="vi">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>@ViewData["Title"]</title>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.0/css/all.min.css">
    <style>
        /* --- COPY ALL CSS FROM Home.cshtml HERE --- */
        @@import url('https://fonts.googleapis.com/css2?family=Orbitron:wght@400;500;700;900&family=Rajdhani:wght@300;400;500;600;700&display=swap');

        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: 'Rajdhani', sans-serif;
            background: #000;
            overflow-x: hidden;
            color: white;
            perspective: 1000px;
        }

        #canvas-container {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            z-index: 0;
        }

        .hud-overlay {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            pointer-events: none;
            z-index: 1;
        }

        .scan-line {
            position: absolute;
            width: 100%;
            height: 2px;
            background: linear-gradient(90deg, transparent, #ff6b35, transparent);
            animation: scanMove 4s linear infinite;
            box-shadow: 0 0 20px #ff6b35;
        }

        .corner-frame {
            position: absolute;
            width: 60px;
            height: 60px;
            border: 2px solid #ff6b35;
            opacity: 0.6;
        }

            .corner-frame.tl {
                top: 20px;
                left: 20px;
                border-right: none;
                border-bottom: none;
            }

            .corner-frame.tr {
                top: 20px;
                right: 20px;
                border-left: none;
                border-bottom: none;
            }

            .corner-frame.bl {
                bottom: 20px;
                left: 20px;
                border-right: none;
                border-top: none;
            }

            .corner-frame.br {
                bottom: 20px;
                right: 20px;
                border-left: none;
                border-top: none;
            }

        .main-container {
            position: relative;
            z-index: 2;
            min-height: 100vh;
            padding: 100px 60px 60px;
            display: flex;
            justify-content: center;
            align-items: flex-start; /* Center form */
        }

        .navbar {
            position: fixed;
            top: 0;
            left: 0;
            right: 0;
            padding: 25px 60px;
            display: flex;
            justify-content: space-between;
            align-items: center;
            background: rgba(0, 0, 0, 0.5);
            backdrop-filter: blur(20px);
            border-bottom: 1px solid rgba(255, 107, 53, 0.3);
            z-index: 100;
            pointer-events: all;
        }

        .logo {
            font-family: 'Orbitron', sans-serif;
            font-size: 2rem;
            font-weight: 900;
            background: linear-gradient(135deg, #ff6b35, #f7931e);
            -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
            text-shadow: 0 0 30px rgba(255, 107, 53, 0.5);
            letter-spacing: 3px;
        }

        .nav-menu {
            display: flex;
            gap: 40px;
            align-items: center;
        }

        .nav-item {
            color: #ccc;
            text-decoration: none;
            font-size: 1.1rem;
            font-weight: 500;
            transition: all 0.3s;
            position: relative;
            cursor: pointer;
        }

            .nav-item::after {
                content: '';
                position: absolute;
                bottom: -5px;
                left: 0;
                width: 0;
                height: 2px;
                background: #ff6b35;
                transition: width 0.3s;
            }

            .nav-item:hover {
                color: #ff6b35;
            }

            .nav-item.active {
                color: #ff6b35;
            }

                .nav-item.active::after {
                    width: 100%;
                }

        .user-profile {
            display: flex;
            align-items: center;
            gap: 15px;
            padding: 10px 20px;
            background: rgba(255, 107, 53, 0.1);
            border: 1px solid rgba(255, 107, 53, 0.3);
            border-radius: 50px;
            cursor: pointer;
            transition: all 0.3s;
        }

            .user-profile:hover {
                background: rgba(255, 107, 53, 0.2);
                box-shadow: 0 0 30px rgba(255, 107, 53, 0.3);
            }

        .user-avatar {
            width: 40px;
            height: 40px;
            border-radius: 50%;
            background: linear-gradient(135deg, #ff6b35, #f7931e);
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 1.2rem;
        }

        /* Booking Form Styles */
        .booking-form-container {
            width: 100%;
            max-width: 700px; /* Limit form width */
            background: rgba(10, 10, 10, 0.7);
            backdrop-filter: blur(20px);
            border: 1px solid rgba(255, 107, 53, 0.3);
            border-radius: 20px;
            padding: 40px;
            pointer-events: all;
            animation: fadeInForm 0.8s ease-out; /* Add fade-in */
        }

        @@keyframes fadeInForm {
            from {
                opacity: 0;
                transform: translateY(20px);
            }

            to {
                opacity: 1;
                transform: translateY(0);
            }
        }


        .form-title {
            font-family: 'Orbitron', sans-serif;
            font-size: 2.5rem;
            font-weight: 700;
            text-align: center;
            margin-bottom: 30px;
            color: #ff6b35;
            text-shadow: 0 0 15px rgba(255, 107, 53, 0.5);
        }

        .form-grid {
            display: grid;
            grid-template-columns: 1fr 1fr; /* Two columns for date/time */
            gap: 20px;
            margin-bottom: 20px;
        }

        .form-group {
            margin-bottom: 20px;
            display: flex;
            flex-direction: column; /* Stack label and input */
        }
            /* Make Title/Description span full width */
            .form-group.full-width {
                grid-column: 1 / -1;
            }

            .form-group label {
                color: #ccc;
                margin-bottom: 8px;
                font-size: 0.95rem;
                font-weight: 600;
                letter-spacing: 1px;
                text-transform: uppercase;
            }

            .form-group input[type="text"],
            .form-group input[type="date"],
            .form-group input[type="time"],
            .form-group select,
            .form-group textarea {
                width: 100%;
                background: rgba(255, 255, 255, 0.05);
                border: 1px solid rgba(255, 107, 53, 0.4);
                color: white;
                padding: 12px 15px;
                border-radius: 8px;
                font-family: 'Rajdhani', sans-serif;
                font-size: 1rem;
                outline: none;
                transition: border-color 0.3s, box-shadow 0.3s;
            }

            .form-group textarea {
                min-height: 100px;
                resize: vertical;
            }

                .form-group input:focus,
                .form-group select:focus,
                .form-group textarea:focus {
                    border-color: #ff6b35;
                    box-shadow: 0 0 15px rgba(255, 107, 53, 0.4);
                }
            /* Style dropdown arrow */
            .form-group select {
                appearance: none;
                background-image: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' fill='%23ff6b35' viewBox='0 0 16 16'%3E%3Cpath d='M7.247 11.14 2.451 5.658C1.885 5.013 2.345 4 3.204 4h9.592a1 1 0 0 1 .753 1.659l-4.796 5.48a1 1 0 0 1-1.506 0z'/%3E%3C/svg%3E");
                background-repeat: no-repeat;
                background-position: right 15px center;
                background-size: 12px;
                padding-right: 40px;
            }

            .form-group input[type="date"]::-webkit-calendar-picker-indicator,
            .form-group input[type="time"]::-webkit-calendar-picker-indicator {
                filter: invert(0.7) sepia(1) saturate(5) hue-rotate(3deg);
                cursor: pointer;
            }

        /* Validation message style */
        .field-validation-error {
            color: #ff5555;
            font-size: 0.9rem;
            margin-top: 5px;
        }

        .validation-summary-errors {
            color: #ff5555;
            background-color: rgba(255, 50, 50, 0.1);
            border: 1px solid #ff5555;
            border-radius: 8px;
            padding: 15px;
            margin-bottom: 20px;
        }

            .validation-summary-errors ul {
                list-style: none;
                padding-left: 0;
            }


        .submit-btn {
            width: 100%;
            padding: 15px;
            background: linear-gradient(135deg, #ff6b35, #f7931e);
            border: none;
            border-radius: 12px;
            color: white;
            font-size: 1.2rem;
            font-weight: 700;
            cursor: pointer;
            transition: all 0.3s;
            text-transform: uppercase;
            letter-spacing: 2px;
            margin-top: 10px; /* Add some space above */
        }

            .submit-btn:hover {
                transform: translateY(-3px);
                box-shadow: 0 10px 40px rgba(255, 107, 53, 0.6);
            }
        /* Style for disabled select option */
        select option[disabled] {
            color: #888;
        }


        /* --- Keyframes & Media Queries (Copied from Home.cshtml) --- */
        @@keyframes scanMove {
            0% {
                top: 0;
            }

            100% {
                top: 100%;
            }
        }

        @@keyframes gradientShift {
            0%, 100% {
                background-position: 0% 50%;
            }

            50% {
                background-position: 100% 50%;
            }
        }

        @@keyframes float {
            0%, 100% {
                transform: translateY(0);
            }

            50% {
                transform: translateY(-20px);
            }
        }

        @@media (max-width: 768px) {
            .navbar {
                padding: 20px 30px;
            }

            .main-container {
                padding: 80px 15px 40px;
            }

            .nav-menu {
                display: none;
            }

            .booking-form-container {
                padding: 30px 20px;
            }

            .form-title {
                font-size: 2rem;
            }

            .form-grid {
                grid-template-columns: 1fr;
            }
            /* Stack date/time fields */
            .form-group.full-width {
                grid-column: 1 / -1;
            }
            /* Ensure it still spans */
        }
    </style>
</head>
<body>
    <div id="canvas-container"></div>
    <div class="hud-overlay">
        <div class="scan-line"></div>
        <div class="corner-frame tl"></div>
        <div class="corner-frame tr"></div>
        <div class="corner-frame bl"></div>
        <div class="corner-frame br"></div>
    </div>

    @* --- Navbar --- *@
    <nav class="navbar">
        <div class="logo">FPT LAB</div>
        <div class="nav-menu">
            <a asp-page="/Home" class="nav-item">Dashboard</a>
            <a asp-page="/MyBookings" class="nav-item">My Bookings</a>
            <a asp-page="/Schedule" class="nav-item">Schedule</a>
            <a asp-page="/Booking/Create" class="nav-item active">Book Lab</a> @* Mark Book Lab as active *@
        </div>
        @if (Model.CurrentUser != null)
        {
            <div class="user-profile">
                <div class="user-avatar">👤</div>
                <div>
                    <div style="font-weight: 600;">@Model.CurrentUser.Name</div>
                    <div style="font-size: 0.85rem; color: #999;">@Model.CurrentUser.Email</div>
                </div>
                <form method="post" asp-page="/Logout" style="margin-left: auto;">
                    <button type="submit" class="nav-item" style="background:none; border:none; color:#ccc; cursor:pointer; padding: 0;">Logout</button>
                </form>
            </div>
        }
    </nav>

    <div class="main-container">
        <div class="booking-form-container">
            <h1 class="form-title">Create New Booking</h1>

            @* Display general validation errors (like time conflict) *@
            <div asp-validation-summary="ModelOnly" class="validation-summary-errors" role="alert"></div>

            <form method="post">
                @* Lab Selection *@
                <div class="form-group">
                    <label asp-for="Input.LabId"></label>
                    <select asp-for="Input.LabId" asp-items="Model.LabOptions" id="labSelect" class="form-control">
                        @* Added form-control for consistency if using Bootstrap later *@
                        <option value="">-- Select Lab --</option>
                    </select>
                    <span asp-validation-for="Input.LabId" class="field-validation-error"></span>
                </div>

                @* Zone Selection (Loaded Dynamically) *@
                <div class="form-group">
                    <label asp-for="Input.ZoneId"></label>
                    <select asp-for="Input.ZoneId" id="zoneSelect" class="form-control">
                        <option value="" disabled selected>-- Select a Lab first --</option>
                        @* Options will be added by JavaScript *@
                    </select>
                    <span asp-validation-for="Input.ZoneId" class="field-validation-error"></span>
                </div>

                @* Date and Time in Grid *@
                <div class="form-grid">
                    <div class="form-group">
                        <label asp-for="Input.BookingDate"></label>
                        <input type="date" asp-for="Input.BookingDate" min="@DateTime.Today.ToString("yyyy-MM-dd")" class="form-control" />
                        <span asp-validation-for="Input.BookingDate" class="field-validation-error"></span>
                    </div>
                    <div class="form-group"> @* Placeholder, needed for grid layout on desktop *@</div>

                    <div class="form-group">
                        <label asp-for="Input.StartTime"></label>
                        <input type="time" asp-for="Input.StartTime" class="form-control" />
                        <span asp-validation-for="Input.StartTime" class="field-validation-error"></span>
                    </div>
                    <div class="form-group">
                        <label asp-for="Input.EndTime"></label>
                        <input type="time" asp-for="Input.EndTime" class="form-control" />
                        <span asp-validation-for="Input.EndTime" class="field-validation-error"></span>
                    </div>
                </div>

                @* Activity Type *@
                <div class="form-group">
                    <label asp-for="Input.ActivityTypeId"></label>
                    <select asp-for="Input.ActivityTypeId" asp-items="Model.ActivityTypeOptions" class="form-control">
                        <option value="">-- Select Activity --</option>
                    </select>
                    <span asp-validation-for="Input.ActivityTypeId" class="field-validation-error"></span>
                </div>

                @* Title *@
                <div class="form-group full-width">
                    <label asp-for="Input.Title"></label>
                    <input type="text" asp-for="Input.Title" placeholder="E.g., SE1801 Class Session, Final Project Work" class="form-control" />
                    <span asp-validation-for="Input.Title" class="field-validation-error"></span>
                </div>

                @* Description (Optional) *@
                <div class="form-group full-width">
                    <label asp-for="Input.Description"></label>
                    <textarea asp-for="Input.Description" placeholder="Optional details about the booking..." class="form-control"></textarea>
                    <span asp-validation-for="Input.Description" class="field-validation-error"></span>
                </div>

                <button type="submit" class="submit-btn">Submit Booking Request</button>
            </form>
        </div>
    </div>

    @* --- JavaScript (Copied from Home, stats animation removed, Added Zone Loading) --- *@
    <script src="https://cdnjs.cloudflare.com/ajax/libs/three.js/r128/three.min.js"></script>
    <script>
        // === THREE.JS BACKGROUND (COPY FROM HOME) ===
        const scene = new THREE.Scene();
        scene.fog = new THREE.FogExp2(0x000000, 0.015);
        const camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);
        const renderer = new THREE.WebGLRenderer({ antialias: true, alpha: true });
        renderer.setSize(window.innerWidth, window.innerHeight);
        renderer.setPixelRatio(Math.min(window.devicePixelRatio, 2));
        document.getElementById('canvas-container').appendChild(renderer.domElement);
        camera.position.z = 50;
        const gridHelper = new THREE.GridHelper(200, 50, 0xff6b35, 0x333333);
        gridHelper.position.y = -20;
        gridHelper.material.opacity = 0.3;
        gridHelper.material.transparent = true;
        scene.add(gridHelper);
        const rings = [];
        for (let i = 0; i < 8; i++) {
            const geometry = new THREE.TorusGeometry(10 + i * 5, 0.2, 16, 100);
            const material = new THREE.MeshBasicMaterial({ color: i % 2 === 0 ? 0xff6b35 : 0xf7931e, transparent: true, opacity: 0.3, wireframe: true });
            const ring = new THREE.Mesh(geometry, material);
            ring.rotation.x = Math.PI / 2;
            ring.position.y = -20;
            rings.push(ring);
            scene.add(ring);
        }
        const nodes = [];
        const nodeGeometry = new THREE.SphereGeometry(0.5, 16, 16);
        for (let i = 0; i < 50; i++) {
            const material = new THREE.MeshStandardMaterial({ color: Math.random() > 0.5 ? 0xff6b35 : 0xf7931e, emissive: Math.random() > 0.5 ? 0xff6b35 : 0xf7931e, emissiveIntensity: 0.8, metalness: 0.9, roughness: 0.1 });
            const node = new THREE.Mesh(nodeGeometry, material);
            node.position.set((Math.random() - 0.5) * 100, (Math.random() - 0.5) * 60, (Math.random() - 0.5) * 100);
            nodes.push({ mesh: node, speed: 0.0005 + Math.random() * 0.001, orbit: Math.random() * Math.PI * 2 });
            scene.add(node);
        }
        const helixPoints = [];
        for (let i = 0; i < 200; i++) {
            const angle = (i / 200) * Math.PI * 8;
            const x = Math.cos(angle) * 8;
            const z = Math.sin(angle) * 8;
            const y = i * 0.3 - 30;
            helixPoints.push(new THREE.Vector3(x, y, z));
        }
        const helixGeometry = new THREE.BufferGeometry().setFromPoints(helixPoints);
        const helixMaterial = new THREE.LineBasicMaterial({ color: 0xff6b35, transparent: true, opacity: 0.4 });
        const helix = new THREE.Line(helixGeometry, helixMaterial);
        scene.add(helix);
        const ambientLight = new THREE.AmbientLight(0xffffff, 0.3); scene.add(ambientLight);
        const lights = [];
        for (let i = 0; i < 3; i++) {
            const light = new THREE.PointLight(0xff6b35, 2, 100);
            lights.push(light);
            scene.add(light);
        }
        let time = 0;
        function animate() {
            requestAnimationFrame(animate);
            time += 0.01;
            rings.forEach((ring, index) => { ring.rotation.z = time * 0.2 + index * 0.1; ring.scale.set(1 + Math.sin(time + index) * 0.1, 1 + Math.sin(time + index) * 0.1, 1); });
            nodes.forEach((node, index) => { node.orbit += node.speed; const radius = 30 + Math.sin(time + index) * 10; node.mesh.position.x = Math.cos(node.orbit) * radius; node.mesh.position.z = Math.sin(node.orbit) * radius; node.mesh.position.y += Math.sin(time * 2 + index) * 0.02; const pulsate = Math.sin(time * 3 + index) * 0.5 + 0.5; node.mesh.material.emissiveIntensity = 0.5 + pulsate * 0.5; });
            helix.rotation.y = time * 0.1;
            gridHelper.position.z = (time * 2) % 4 - 2;
            lights.forEach((light, index) => { const angle = time * 0.5 + (index * Math.PI * 2 / 3); light.position.x = Math.cos(angle) * 40; light.position.z = Math.sin(angle) * 40; light.position.y = Math.sin(time * 0.3 + index) * 20; });
            camera.position.x = Math.sin(time * 0.1) * 5;
            camera.position.y = Math.cos(time * 0.08) * 3;
            camera.lookAt(0, 0, 0);
            renderer.render(scene, camera);
        }
        animate();


        // === OTHER JS ===
        // Resize handler (Giữ nguyên)
        window.addEventListener('resize', () => {
             camera.aspect = window.innerWidth / window.innerHeight;
             camera.updateProjectionMatrix();
             renderer.setSize(window.innerWidth, window.innerHeight);
         });

        // === Dynamic Zone Loading ===
        const labSelect = document.getElementById('labSelect');
        const zoneSelect = document.getElementById('zoneSelect');

        async function loadZones(labId) {
            // Clear existing options except the placeholder
            zoneSelect.innerHTML = '<option value="" disabled selected>Loading zones...</option>';

            if (!labId) {
                 zoneSelect.innerHTML = '<option value="" disabled selected>-- Select a Lab first --</option>';
                zoneSelect.disabled = true;
                return;
            }

            try {
                // Call the Page Handler using Fetch API
                const response = await fetch(`/CreateBooking?handler=Zones&labId=${labId}`);
                if (!response.ok) {
                    throw new Error(`HTTP error! status: ${response.status}`);
                }
                const zones = await response.json();

                // Clear loading message
                 zoneSelect.innerHTML = '<option value="">-- Select Zone --</option>';

                if (zones && zones.length > 0) {
                     zones.forEach(zone => {
                        const option = document.createElement('option');
                        option.value = zone.id;
                        option.textContent = zone.name;
                        // Check if this zone was selected before postback (if Input.ZoneId has value)
                        if ('@Model.Input.ZoneId' == zone.id) { // Compare with model value
                            option.selected = true;
                        }
                        zoneSelect.appendChild(option);
                    });
                     zoneSelect.disabled = false;
                } else {
                    // No zones found for this lab
                     zoneSelect.innerHTML = '<option value="" disabled selected>-- No zones available --</option>';
                     zoneSelect.disabled = true;
                }

            } catch (error) {
                 console.error("Error loading zones:", error);
                 zoneSelect.innerHTML = '<option value="" disabled selected>-- Error loading zones --</option>';
                 zoneSelect.disabled = true;
            }
        }

         // Event listener for lab selection change
         labSelect.addEventListener('change', (event) => {
            const selectedLabId = event.target.value;
            loadZones(selectedLabId);
        });

        // Initial load on page load (handles pre-selection and postback with errors)
         document.addEventListener('DOMContentLoaded', () => {
             const initialLabId = labSelect.value;
             if(initialLabId) {
                 loadZones(initialLabId); // Load zones for the initially selected lab
             } else {
                 zoneSelect.disabled = true; // Disable if no lab selected initially
             }
         });

    </script>
    @* Include validation scripts for client-side validation *@
    @await Html.PartialAsync("_ValidationScriptsPartial")
</body>
</html>