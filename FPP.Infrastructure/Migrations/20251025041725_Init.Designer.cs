// <auto-generated />
using System;
using FPP.Infrastructure.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace FPP.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20251025041725_Init")]
    partial class Init
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("FPP.Domain.Entities.ActivityType", b =>
                {
                    b.Property<int>("ActivityTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("activity_type_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ActivityTypeId"));

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("name");

                    b.HasKey("ActivityTypeId")
                        .HasName("PK__activity__D2470C87629CC28F");

                    b.ToTable("activity_types", (string)null);
                });

            modelBuilder.Entity("FPP.Domain.Entities.EventParticipant", b =>
                {
                    b.Property<int>("EventId")
                        .HasColumnType("int")
                        .HasColumnName("event_id");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.Property<decimal>("Role")
                        .HasColumnType("decimal(2, 0)")
                        .HasColumnName("role");

                    b.HasKey("EventId", "UserId")
                        .HasName("PK__event_pa__C8EB1457EABB0E83");

                    b.HasIndex("UserId");

                    b.ToTable("event_participants", (string)null);
                });

            modelBuilder.Entity("FPP.Domain.Entities.Lab", b =>
                {
                    b.Property<int>("LabId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("lab_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LabId"));

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("Location")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("location");

                    b.Property<int>("ManagerId")
                        .HasColumnType("int")
                        .HasColumnName("manager_id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("name");

                    b.HasKey("LabId")
                        .HasName("PK__labs__66DE64DBFF9798EE");

                    b.HasIndex("ManagerId");

                    b.ToTable("labs", (string)null);
                });

            modelBuilder.Entity("FPP.Domain.Entities.LabEvent", b =>
                {
                    b.Property<int>("EventId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("event_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EventId"));

                    b.Property<int>("ActivityTypeId")
                        .HasColumnType("int")
                        .HasColumnName("activity_type_id");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("datetime")
                        .HasColumnName("end_time");

                    b.Property<int>("LabId")
                        .HasColumnType("int")
                        .HasColumnName("lab_id");

                    b.Property<int>("OrganizerId")
                        .HasColumnType("int")
                        .HasColumnName("organizer_id");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("datetime")
                        .HasColumnName("start_time");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("status");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("title");

                    b.Property<int>("ZoneId")
                        .HasColumnType("int")
                        .HasColumnName("zone_id");

                    b.HasKey("EventId")
                        .HasName("PK__lab_even__2370F7271B17C676");

                    b.HasIndex("ActivityTypeId");

                    b.HasIndex("LabId");

                    b.HasIndex("OrganizerId");

                    b.HasIndex("ZoneId");

                    b.ToTable("lab_events", (string)null);
                });

            modelBuilder.Entity("FPP.Domain.Entities.LabZone", b =>
                {
                    b.Property<int>("ZoneId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("zone_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ZoneId"));

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<int>("LabId")
                        .HasColumnType("int")
                        .HasColumnName("lab_id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("name");

                    b.HasKey("ZoneId")
                        .HasName("PK__lab_zone__80B401DFEA5810CC");

                    b.HasIndex("LabId");

                    b.ToTable("lab_zones", (string)null);
                });

            modelBuilder.Entity("FPP.Domain.Entities.Notification", b =>
                {
                    b.Property<int>("NotificationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("notification_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("NotificationId"));

                    b.Property<int>("EventId")
                        .HasColumnType("int")
                        .HasColumnName("event_id");

                    b.Property<bool>("IsRead")
                        .HasColumnType("bit")
                        .HasColumnName("is_read");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("message");

                    b.Property<int>("RecipientId")
                        .HasColumnType("int")
                        .HasColumnName("recipient_id");

                    b.Property<DateTime>("SentAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("sent_at")
                        .HasDefaultValueSql("(getdate())");

                    b.HasKey("NotificationId")
                        .HasName("PK__notifica__E059842F693CAC11");

                    b.HasIndex("EventId");

                    b.HasIndex("RecipientId");

                    b.ToTable("notifications", (string)null);
                });

            modelBuilder.Entity("FPP.Domain.Entities.Report", b =>
                {
                    b.Property<int>("ReportId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("report_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ReportId"));

                    b.Property<string>("Content")
                        .HasColumnType("text")
                        .HasColumnName("content");

                    b.Property<DateTime>("GeneratedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("generated_at")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int>("GeneratedBy")
                        .HasColumnType("int")
                        .HasColumnName("generated_by");

                    b.Property<int?>("LabId")
                        .HasColumnType("int")
                        .HasColumnName("lab_id");

                    b.Property<string>("ReportType")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("report_type");

                    b.Property<int?>("ZoneId")
                        .HasColumnType("int")
                        .HasColumnName("zone_id");

                    b.HasKey("ReportId")
                        .HasName("PK__reports__779B7C581AA75571");

                    b.HasIndex("GeneratedBy");

                    b.HasIndex("LabId");

                    b.HasIndex("ZoneId");

                    b.ToTable("reports", (string)null);
                });

            modelBuilder.Entity("FPP.Domain.Entities.SecurityLog", b =>
                {
                    b.Property<int>("LogId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("log_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LogId"));

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("action");

                    b.Property<int>("EventId")
                        .HasColumnType("int")
                        .HasColumnName("event_id");

                    b.Property<string>("Notes")
                        .HasColumnType("text")
                        .HasColumnName("notes");

                    b.Property<string>("PhotoUrl")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("photo_url");

                    b.Property<int>("SecurityId")
                        .HasColumnType("int")
                        .HasColumnName("security_id");

                    b.Property<DateTime>("Timestamp")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("timestamp")
                        .HasDefaultValueSql("(getdate())");

                    b.HasKey("LogId")
                        .HasName("PK__security__9E2397E03FC0E053");

                    b.HasIndex("EventId");

                    b.HasIndex("SecurityId");

                    b.ToTable("security_logs", (string)null);
                });

            modelBuilder.Entity("FPP.Domain.Entities.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserId"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("email");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("name");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasMaxLength(128)
                        .IsUnicode(false)
                        .HasColumnType("varchar(128)")
                        .HasColumnName("password_hash");

                    b.Property<decimal>("Role")
                        .HasColumnType("decimal(2, 0)")
                        .HasColumnName("role");

                    b.HasKey("UserId")
                        .HasName("PK__users__B9BE370F42B9A65E");

                    b.HasIndex(new[] { "Email" }, "UQ__users__AB6E616485912C3D")
                        .IsUnique();

                    b.ToTable("users", (string)null);
                });

            modelBuilder.Entity("FPP.Domain.Entities.EventParticipant", b =>
                {
                    b.HasOne("FPP.Domain.Entities.LabEvent", "Event")
                        .WithMany("EventParticipants")
                        .HasForeignKey("EventId")
                        .IsRequired()
                        .HasConstraintName("FK__event_par__event__49C3F6B7");

                    b.HasOne("FPP.Domain.Entities.User", "User")
                        .WithMany("EventParticipants")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK__event_par__user___4AB81AF0");

                    b.Navigation("Event");

                    b.Navigation("User");
                });

            modelBuilder.Entity("FPP.Domain.Entities.Lab", b =>
                {
                    b.HasOne("FPP.Domain.Entities.User", "Manager")
                        .WithMany("Labs")
                        .HasForeignKey("ManagerId")
                        .IsRequired()
                        .HasConstraintName("FK__labs__manager_id__3B75D760");

                    b.Navigation("Manager");
                });

            modelBuilder.Entity("FPP.Domain.Entities.LabEvent", b =>
                {
                    b.HasOne("FPP.Domain.Entities.ActivityType", "ActivityType")
                        .WithMany("LabEvents")
                        .HasForeignKey("ActivityTypeId")
                        .IsRequired()
                        .HasConstraintName("FK__lab_event__activ__45F365D3");

                    b.HasOne("FPP.Domain.Entities.Lab", "Lab")
                        .WithMany("LabEvents")
                        .HasForeignKey("LabId")
                        .IsRequired()
                        .HasConstraintName("FK__lab_event__lab_i__440B1D61");

                    b.HasOne("FPP.Domain.Entities.User", "Organizer")
                        .WithMany("LabEvents")
                        .HasForeignKey("OrganizerId")
                        .IsRequired()
                        .HasConstraintName("FK__lab_event__organ__46E78A0C");

                    b.HasOne("FPP.Domain.Entities.LabZone", "Zone")
                        .WithMany("LabEvents")
                        .HasForeignKey("ZoneId")
                        .IsRequired()
                        .HasConstraintName("FK__lab_event__zone___44FF419A");

                    b.Navigation("ActivityType");

                    b.Navigation("Lab");

                    b.Navigation("Organizer");

                    b.Navigation("Zone");
                });

            modelBuilder.Entity("FPP.Domain.Entities.LabZone", b =>
                {
                    b.HasOne("FPP.Domain.Entities.Lab", "Lab")
                        .WithMany("LabZones")
                        .HasForeignKey("LabId")
                        .IsRequired()
                        .HasConstraintName("FK__lab_zones__lab_i__3E52440B");

                    b.Navigation("Lab");
                });

            modelBuilder.Entity("FPP.Domain.Entities.Notification", b =>
                {
                    b.HasOne("FPP.Domain.Entities.LabEvent", "Event")
                        .WithMany("Notifications")
                        .HasForeignKey("EventId")
                        .IsRequired()
                        .HasConstraintName("FK__notificat__event__5535A963");

                    b.HasOne("FPP.Domain.Entities.User", "Recipient")
                        .WithMany("Notifications")
                        .HasForeignKey("RecipientId")
                        .IsRequired()
                        .HasConstraintName("FK__notificat__recip__5441852A");

                    b.Navigation("Event");

                    b.Navigation("Recipient");
                });

            modelBuilder.Entity("FPP.Domain.Entities.Report", b =>
                {
                    b.HasOne("FPP.Domain.Entities.User", "GeneratedByNavigation")
                        .WithMany("Reports")
                        .HasForeignKey("GeneratedBy")
                        .IsRequired()
                        .HasConstraintName("FK__reports__generat__59063A47");

                    b.HasOne("FPP.Domain.Entities.Lab", "Lab")
                        .WithMany("Reports")
                        .HasForeignKey("LabId")
                        .HasConstraintName("FK__reports__lab_id__59FA5E80");

                    b.HasOne("FPP.Domain.Entities.LabZone", "Zone")
                        .WithMany("Reports")
                        .HasForeignKey("ZoneId")
                        .HasConstraintName("FK__reports__zone_id__5AEE82B9");

                    b.Navigation("GeneratedByNavigation");

                    b.Navigation("Lab");

                    b.Navigation("Zone");
                });

            modelBuilder.Entity("FPP.Domain.Entities.SecurityLog", b =>
                {
                    b.HasOne("FPP.Domain.Entities.LabEvent", "Event")
                        .WithMany("SecurityLogs")
                        .HasForeignKey("EventId")
                        .IsRequired()
                        .HasConstraintName("FK__security___event__4E88ABD4");

                    b.HasOne("FPP.Domain.Entities.User", "Security")
                        .WithMany("SecurityLogs")
                        .HasForeignKey("SecurityId")
                        .IsRequired()
                        .HasConstraintName("FK__security___secur__4F7CD00D");

                    b.Navigation("Event");

                    b.Navigation("Security");
                });

            modelBuilder.Entity("FPP.Domain.Entities.ActivityType", b =>
                {
                    b.Navigation("LabEvents");
                });

            modelBuilder.Entity("FPP.Domain.Entities.Lab", b =>
                {
                    b.Navigation("LabEvents");

                    b.Navigation("LabZones");

                    b.Navigation("Reports");
                });

            modelBuilder.Entity("FPP.Domain.Entities.LabEvent", b =>
                {
                    b.Navigation("EventParticipants");

                    b.Navigation("Notifications");

                    b.Navigation("SecurityLogs");
                });

            modelBuilder.Entity("FPP.Domain.Entities.LabZone", b =>
                {
                    b.Navigation("LabEvents");

                    b.Navigation("Reports");
                });

            modelBuilder.Entity("FPP.Domain.Entities.User", b =>
                {
                    b.Navigation("EventParticipants");

                    b.Navigation("LabEvents");

                    b.Navigation("Labs");

                    b.Navigation("Notifications");

                    b.Navigation("Reports");

                    b.Navigation("SecurityLogs");
                });
#pragma warning restore 612, 618
        }
    }
}
